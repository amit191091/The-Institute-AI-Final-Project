# === API keys (pick at least one embedding/LLM backend) ===
# Google Generative AI key; used for embeddings and chat if present
GOOGLE_API_KEY=

# OpenAI key; used for embeddings and chat if Google key not present
OPENAI_API_KEY=

# Default chat model when using OpenAI
OPENAI_CHAT_MODEL=gpt-4o-mini

#LLa
# Optional client identifier stored in metadata for all chunks
CLIENT_ID=DEMO-CLIENT


# === App behavior toggles ===
# When true, build indices only and skip Gradio UI
RAG_HEADLESS=false

# Logging levels: DEBUG, INFO, WARNING, ERROR
RAG_LOG_LEVEL=INFO
RAG_FILE_LOG_LEVEL=DEBUG


# === PDF parsing controls ===
# Enable high-resolution parsing (OCR/layout). Requires extra system deps.
# If you see PDFInfoNotInstalledError on Windows, set this to false or install Poppler (pdfinfo).
RAG_PDF_HI_RES=true

# OCR language(s) for hi_res mode. Use plus or comma separated (e.g., "eng+heb" or "eng,heb").
RAG_OCR_LANG=eng

# Also try extracting tables using Tabula (Java). Requires Java; JPype1 optional to speed up.
# Enable if your reports have many embedded tables that standard parsing misses.
RAG_USE_TABULA=false

# Extract embedded images via PyMuPDF and index as Figure contexts. Saves files under logs/images.
RAG_EXTRACT_IMAGES=false

# Dump raw parsed element summaries to logs/elements/*.jsonl for debugging.
RAG_DUMP_ELEMENTS=false

# Additional table extractors (optional)
RAG_USE_PDFPLUMBER=false
RAG_USE_CAMELOT=false


# === Notes ===
# - Only GOOGLE_API_KEY is used for Gemini in this project; a variable named GEMINI_API_KEY is ignored.
# - For RAG_PDF_HI_RES=true on Windows, consider installing:
#   * Poppler (provides pdfinfo) and Tesseract OCR for better results.
# - For RAG_USE_TABULA=true, ensure Java is installed; `pip install JPype1` is optional but faster.
